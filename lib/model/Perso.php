<?php

/**
 * Skeleton subclass for representing a row from the 'wow_perso' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.4-dev on:
 *
 * 12/23/11 16:58:37
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class Perso extends BasePerso
{
    /**
     * surcharge du call pour appeler le compte à travers le perso
     */
    public function __call($method, $params)
    {
        $compte = $this->getCompte();
        $callback = array($compte, $method);

        if(!is_callable($callback))
            throw new Exception(sprintf('Méthode %s.%s() ou %s.%s() indéfinie.',
                'Compte', $method, 'Perso', $method
            ));

        return call_user_func_array(
            $callback, $params
        );
    }

    /**
     * crée et renvoie un perso à partir d'un tableau
     * @param  array $data données à partir desquelles créer le perso
     * @return Perso
     */
    public static function createFromArray($data)
    {
        $perso = new Perso();

        $perso->setNom($data['nom']);
        $perso->setIdClasse($data['id_classe']);
        $perso->setIdSpe1($data['id_spe1']);
        $perso->setIdSpe2($data['id_spe2']);
        $perso->setIdCompte($data['id_compte']);
        $perso->setIsMain($data['is_main']);

        return $perso;
    }

    /**
     * renvoie l'objet spe1 du perso
     * @return Spe
     */
    public function getSpe1()
    {
        return $this->getSpeRelatedByIdSpe1();
    }

    /**
     * renvoie l'objet spe2 du perso
     * @return Spe
     */
    public function getSpe2()
    {
        return $this->getSpeRelatedByIdSpe2();
    }


    /**
     * teste si le perso est un main
     * @return bool
     */
    public function isMain()
    {
        return $this->getIsMain() == 1;
    }

    /**
     * renvoie les autres persos du compte
     * @return array
     */
    public function getOtherPersos()
    {
        return PersoQuery::create()
            ->where('Perso.IdPerso != ?', $this->getIdPerso())
            ->where('Perso.IdCompte = ?', $this->getIdCompte())
            ->orderBy('Perso.IsMain', 'desc')
            ->find()
            ->getData();
    }

    /**
     * renvoie le nombre de loots pour la soirée en paramètre
     * @param  Soiree $soiree
     * @return int
     */
    public function getLootsForSoiree(Soiree $soiree)
    {
        return ObjetQuery::create()
            ->useAttributionQuery()
                ->filterByIdSoiree($soiree->getIdSoiree())
                ->filterByIdPerso($this->getIdPerso())
            ->endUse()
            ->find()
            ->getData();
    }

    /**
     * callback de tri sur les personnes
     * @param  Perso $perso1 perso à comparer
     * @param  Perso $perso2 perso à comparer
     * @return int
     */
    public static function triParPrio(Perso $p1, Perso $p2)
    {
        if($p1->isMain() != $p2->isMain())

            return $p1->isMain() ? -1 : 1;

        if($p1->getPriorite() != $p2->getPriorite())

            return $p1->getPriorite() > $p2->getPriorite() ? 1 : -1;

        return 0;
    }

} // Perso
