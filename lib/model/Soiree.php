<?php

/**
 * Skeleton subclass for representing a row from the 'wow_soiree' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.4-dev on:
 *
 * 12/23/11 16:58:38
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class Soiree extends BaseSoiree
{
    // status des soirées
    const CREE = 1;
    const VALIDEE = 2;
    const ANNULEE = 4;
    const CLOSED = 5;
    const LOCK = 6;

    /**
     * renvoie la liste des status possibles de la soirée en tableaux indexés
     * id => libelle
     * @return array
     */
    public function getListeStatus()
    {
        return array(
            self::CREE => 'Crée',
            self::VALIDEE => 'Validée',
            self::ANNULEE => 'Annulée',
            self::CLOSED => 'Terminée'
        );
    }

    /**
     * renvoie le statut de la soirée
     * @return string
     */
    public function getStatus()
    {
        $liste = $this->getListeStatus();

        return $liste[$this->getEtat()];
    }

    /**
     * renvoie la liste des persos inscrits pour le raid, groupés par role et dispo
     * @return array
     */
    public function getListeInscrits()
    {
        return PersoQuery::create()
            ->join('Perso.PersoSoiree')
            ->join('PersoSoiree.Soiree')
            ->where('Soiree.IdSoiree = ?', $this->getIdSoiree())
            ->where('Perso.IsMain = ? ', true)
            ->orderBy('Perso.IdSpe1')
            ->find();
    }

    /**
     * renvoie la compo de la soirée groupée par statuts
     */
    public function getCompo()
    {
        // liste globale à afficher
        $listeCompo = array();
        $queryPersoSoiree = PersoSoireeQuery::create()
            ->join('PersoSoiree.Soiree')
            ->join('PersoSoiree.RefStatutPersoRelatedByIdStatutAdmin');

        $listeRoles = RoleQuery::create()
            ->find();

        foreach($listeRoles as $role)
            $listeCompo[$role->getCode()] = array(
                'img' => $role->getImage(),
                'label' => preg_replace('/([^s])$/', '$1s', $role->getLibelle()),
                'data' => array()
            );

        //---------------------------------------------------------------
        // récupération des persos confirmés
        //---------------------------------------------------------------

        $listeConfirmes = $queryPersoSoiree
            ->where('Soiree.IdSoiree = ?', $this->getIdSoiree())
            ->where('RefStatutPersoRelatedByIdStatutAdmin.Code = ?', 'confirme')
            ->find();

        // ventilation en fonction des rôles
        foreach($listeConfirmes as $persoSoiree)
            $listeCompo[$persoSoiree->getRole()->getCode()]['data'][] = $persoSoiree->getPerso();

        //---------------------------------------------------------------
        // autres status
        //---------------------------------------------------------------
        $listeStatusAffichage = array(
            'appele', 'rpl_admin', 'absent', 'refus_admin'
        );

        foreach ($listeStatusAffichage as $codeStatut) {
            $statut = RefStatutPersoQuery::create()
                ->filterByCode($codeStatut)
                ->findOne();

            $listeCompo[$codeStatut] = array(
                'img' => $statut->getImage(),
                'label' => $statut->getLibelle(),
                'data' => PersoQuery::create()
                    ->join('Perso.PersoSoiree')
                    ->where('PersoSoiree.IdSoiree = ?', $this->getIdSoiree())
                    ->where('PersoSoiree.IdStatutAdmin = ?', $statut->getIdRefStatutPerso())
                    ->find()
                    ->getData()
            );
        }

        return $listeCompo;
    }

    /**
     * renvoie la liste des persos confirmés pour la soirée
     * @return array
     */
    public function getListeConfirmes()
    {
        return PersoQuery::create()
            ->usePersoSoireeQuery()
                ->filterByIdSoiree($this->getIdSoiree())
                ->useRefStatutPersoRelatedByIdStatutAdminQuery()
                    ->filterByCode(array('confirme','appele'))
                ->endUse()
            ->endUse()
        ->find();
    }

} // Soiree
