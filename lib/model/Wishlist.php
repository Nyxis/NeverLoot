<?php

/**
 * Skeleton subclass for representing a row from the 'wow_wishlist' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.4-dev on:
 *
 * 12/23/11 16:58:38
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class Wishlist extends BaseWishlist
{
    /**
     * renvoie la liste des objets groupés par source d'obtention (boss, vaillance, craft...)
     * @return array()
     */
    public function getObjetsGroupedBySource()
    {
        $listeObjets = $this->getWishlistObjetsJoinObjet();

        $return = array(
            'raid' => array(
                'label' => 'en raid',
                'img' => 'pictos/skull.png',
                'data' => array(),
            ),
            'other' => array(
                'label' => 'hors raids',
                'img' => 'pictos/coins.png',
                'data' => array(),
            ),
            'looted' => array(
                'label' => 'obtenus',
                'img' => 'pictos/wl_spe1.png',
                'data' => array(),
            )
        );

        foreach ($listeObjets as $wlObjet) {
            $objet = $wlObjet->getObjet();

            if (in_array($wlObjet->getEtat(), array(WishlistObjet::OBTENU_PLAYER, WishlistObjet::OBTENU_RAID))) {
                $return['looted']['data'][] = $wlObjet->getObjet();
                continue;
            }

            $idBoss = $objet->getIdBoss();
            $idRaid = $objet->getIdRaid();
            $idParent = $objet->getIdObjetCreateur();

            if(isset($idBoss)
                || isset($idRaid)
                || isset($idParent)
            )
            {
                $return['raid']['data'][] = $wlObjet->getObjet();
                continue;
            }

            $return['other']['data'][] = $wlObjet->getObjet();
        }

        return $return;
    }


    /**
     * compare deux WishlistObjet en paramètre en fonction du perso rattaché, du type de wishlist
     * etc...
     * @param  WishlistObjet $wlO1
     * @param  WishlistObjet $wlO2
     * @return int
     */
    public static function trierObjet(WishlistObjet $wlO1, WishlistObjet $wlO2)
    {
        $wl1 = $wlO1->getWishlist();
        $wl2 = $wlO2->getWishlist();

        // persos : mains > rerolls
        $p1 = $wl1->getPerso();
        $p2 = $wl2->getPerso();

        if($p1->isMain() != $p2->isMain())

            return $p1->isMain() ? -1 : 1;

        // type de : spe1 > spe2
        $twl2 = $wl2->getTypeWishlist();
        $twl1 = $wl1->getTypeWishlist();

        if($twl1->getOrdre() != $twl2->getOrdre())

            return $twl1->getOrdre() < $twl2->getOrdre() ? 1 : -1 ;

        // priorité
        if($p1->getPriorite() != $p2->getPriorite())

            return $p1->getPriorite() > $p2->getPriorite() ? 1 : -1;

        return 0;
    }

    /**
     * peuple les données de l'objet à partir des données en paramètre
     * @param array $params
     */
    public function updateWithArray($params)
    {
        $this->setIdPerso($params['id_perso']);
        $this->setNom($params['wl_nom']);
        $this->setOrdre($params['wl_ordre']);

        return $this->save();
    }

    /**
     * ajoute un objet en paramètre dans le slot en paramètre
     * @param  string|Objet $item objet à ajouter ou id d'objet
     * @param  string|Slot  $slot slot ou id de slot à mettre à jour
     * @return Wishlist
     */
    public function addItem($item, $slot)
    {
        if($item instanceof Objet)
            $item = $item->getIdObjet();

        if($slot instanceof Slot)
            $slot = $slot->getIdSlot();

        // @TODO validation de l'objet pour ce slot

        $nbUpdated = WishlistObjetQuery::create()
            ->filterByIdWishlist($this->getIdWishlist())
            ->filterByIdSlot($slot)
            ->update(array(
                'IdObjet' => $item
            ));

        return $this;
    }

} // Wishlist
